{"version":3,"sources":["webpack:///./src/components/MealInspiration.js","webpack:///./src/templates/inspiration.js","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./.cache/public-page-renderer.js","webpack:///./src/data/languages.js","webpack:///./.cache/public-page-renderer-prod.js","webpack:///./src/data/messages/en-NZ.js","webpack:///./src/data/messages/nl-NL.js","webpack:///./src/components/LanguageSelector.js","webpack:///./src/components/Layout.js"],"names":["Item","styled","div","withConfig","displayName","componentId","HeroImage","props","react_default","a","createElement","gatsby_image_default","Title","h1","MealInspiration","_ref","meal","locale","gatsby_browser_entry","to","slug","resolutions","heroImage","title","__webpack_require__","d","__webpack_exports__","pageQuery","Wrapper","InspirationPage","location","pageContext","data","Layout","Helmet_default","site","siteMetadata","allContentfulMeal","edges","map","_ref2","node","components_MealInspiration","key","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","prop_types__WEBPACK_IMPORTED_MODULE_1__","prop_types__WEBPACK_IMPORTED_MODULE_1___default","gatsby_link__WEBPACK_IMPORTED_MODULE_2__","gatsby_link__WEBPACK_IMPORTED_MODULE_2___default","React","createContext","PropTypes","object","string","isRequired","func","m","module","exports","require","default","formatDistanceToNow","messages","en-NZ","nl-NL","formatLocales","getMessage","message","languages","label","defaultLocale","formatDateDistanceToNow","date","ProdPageRenderer","pageResources","InternalPageRenderer","Object","assign","json","propTypes","shape","pathname","LAST_UPDATED","AGO","VIEW","LANGUAGE","HOME","INSPIRATION","Selector","SelectorLabel","span","Items","LanguageSelector","currentLocale","path","_3175702868","Container","Navigation","nav","NavigationItem","NavigationSpacer","theme","children","locationParts","substring","split","shift","join","styled_components_browser_esm","Fragment","components_LanguageSelector"],"mappings":"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","file":"component---src-templates-inspiration-js-ab0a431179e46f2d509e.js","sourcesContent":["import React from 'react'\nimport { Link } from 'gatsby'\nimport Img from 'gatsby-image'\nimport styled from 'styled-components'\nimport { mb } from 'styled-components-spacing'\n\nconst Item = styled.div`\n  width: 250px;\n  height: 250px;\n  flex: none;\n  display: flex;\n  position: relative;\n`\n\nconst HeroImage = styled(props => <Img {...props} />)`\n  max-width: 100%;\n  max-height: 100%;\n  perspective: 1px;\n`\n\nconst Title = styled.h1`\n  display: none;\n  position: absolute;\n  width: 100%;\n  color: white;\n  bottom: 2rem;\n  margin: 0;\n  padding: 0.25rem;\n  background-color: rgba(0, 0, 0, 0.6);\n\n  ${Item}:hover & {\n    display: block;\n  }\n`\n\nconst MealInspiration = ({ meal, locale }) => {\n  return (\n    <Item>\n      <Link to={`/${locale}/meal/${meal.slug}/`}>\n        <HeroImage resolutions={meal.heroImage.resolutions} />\n        <Title>{meal.title}</Title>\n      </Link>\n    </Item>\n  )\n}\n\nexport default MealInspiration\n","import React from 'react'\nimport { graphql } from 'gatsby'\nimport Helmet from 'react-helmet'\nimport Layout from '../components/Layout'\nimport MealInspiration from '../components/MealInspiration'\nimport styled from 'styled-components'\nimport { getMessage } from '../data/languages'\n\nconst Wrapper = styled.div`\n  display: flex;\n  padding: 20px;\n  overflow-x: hidden;\n  flex-wrap: wrap;\n  background-color: #fff;\n  max-width: 1290px;\n\n  @media (max-width: 540px) {\n    max-width: 290px;\n  }\n\n  @media (min-width: 541px) and (max-width: 790px) {\n    max-width: 540px;\n  }\n\n  @media (min-width: 791px) and (max-width: 1040px) {\n    max-width: 790px;\n  }\n\n  @media (min-width: 1041px) and (max-width: 1290px) {\n    max-width: 1040px;\n  }\n`\n\nconst InspirationPage = ({ location, pageContext, data }) => {\n\n  return (\n    <Layout location={location} >\n      <Helmet title={`${data.site.siteMetadata.title} | ${'test'}`} />\n      <Wrapper>\n          {data.allContentfulMeal.edges.map(({ node }) => (\n            <MealInspiration\n              key={node.slug}\n              meal={node}\n              locale={pageContext.locale}\n            />\n          ))}\n      </Wrapper>\n    </Layout>\n  )\n}\n\nexport default InspirationPage\n\nexport const pageQuery = graphql`\n  query InspirationByLanguage($locale: String!) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allContentfulMeal(\n      filter: { node_locale: { eq: $locale }, title: { ne: null }}\n      sort: { fields: updatedAt, order: DESC }\n    ) {\n      edges {\n        node {\n          title\n          slug\n          heroImage {\n            resolutions(width: 250, height: 250) {\n              ...GatsbyContentfulResolutions\n            }\n          }\n        }\n      }\n    }\n  }\n`\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  withAssetPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n  parsePath,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\n\nconst StaticQueryContext = React.createContext({})\n\nfunction StaticQueryDataRenderer({ staticQueryData, data, query, render }) {\n  const finalData = data\n    ? data.data\n    : staticQueryData[query] && staticQueryData[query].data\n\n  return (\n    <React.Fragment>\n      {finalData && render(finalData)}\n      {!finalData && <div>Loading (StaticQuery)</div>}\n    </React.Fragment>\n  )\n}\n\nconst StaticQuery = props => {\n  const { data, query, render, children } = props\n\n  return (\n    <StaticQueryContext.Consumer>\n      {staticQueryData => (\n        <StaticQueryDataRenderer\n          data={data}\n          query={query}\n          render={render || children}\n          staticQueryData={staticQueryData}\n        />\n      )}\n    </StaticQueryContext.Consumer>\n  )\n}\n\nconst useStaticQuery = query => {\n  if (\n    typeof React.useContext !== `function` &&\n    process.env.NODE_ENV === `development`\n  ) {\n    throw new Error(\n      `You're likely using a version of React that doesn't support Hooks\\n` +\n        `Please update React and ReactDOM to 16.8.0 or later to use the useStaticQuery hook.`\n    )\n  }\n  const context = React.useContext(StaticQueryContext)\n  if (context[query] && context[query].data) {\n    return context[query].data\n  } else {\n    throw new Error(\n      `The result of this StaticQuery could not be fetched.\\n\\n` +\n        `This is likely a bug in Gatsby and if refreshing the page does not fix it, ` +\n        `please open an issue in https://github.com/gatsbyjs/gatsby/issues`\n    )\n  }\n}\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withAssetPrefix,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  useStaticQuery,\n}\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","const formatDistanceToNow = require('date-fns/formatDistanceToNow').default;\n\nconst languages = [\n  {\n    locale: 'en-NZ',\n    label: '🇳🇿 English',\n  },\n  {\n    locale: 'nl-NL',\n    label: '🇳🇱 Nederlands',\n  }\n]\n\nconst defaultLocale = 'en-NZ'\n\nconst messages = {\n  'en-NZ': require('./messages/en-NZ'),\n  'nl-NL': require('./messages/nl-NL'),\n}\n\nconst formatLocales = {\n  'en-NZ': require('date-fns/locale/en-GB'),\n  'nl-NL': require('date-fns/locale/nl'),\n}\n\nconst getMessage = locale => message => messages[locale][message];\nconst formatDateDistanceToNow = (locale, date)  => {\n  const messages = getMessage(locale);\n  return `${messages('LAST_UPDATED')} ${formatDistanceToNow(date, { locale: formatLocales[locale] })} ${messages('AGO')}`\n}\n\nmodule.exports = {\n  languages,\n  defaultLocale,\n  getMessage,\n  formatDateDistanceToNow,\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\n\nconst ProdPageRenderer = ({ location, pageResources }) => {\n  if (!pageResources) {\n    return null\n  }\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n","module.exports = {\n  'LAST_UPDATED': 'Last updated',\n  'AGO': 'ago',\n  'VIEW': ' View',\n  'LANGUAGE': 'Language',\n  'HOME': 'Home',\n  'INSPIRATION': 'Inspiration',\n}\n","module.exports = {\n  'LAST_UPDATED': 'Laatst bijgewerkt',\n  'AGO': 'geleden',\n  'VIEW': 'Kijk',\n  'LANGUAGE': 'Taal',\n  'HOME': 'Start',\n  'INSPIRATION': 'Inspiratie',\n}\n","import React from 'react'\nimport { useStaticQuery, graphql, Link } from 'gatsby'\nimport styled from 'styled-components'\nimport { getMessage } from '../data/languages'\n\nconst Selector = styled.div`\n  font-size: 1rem;\n  width: 150px;\n  position: relative;\n  display: flex;\n  padding: 10px;\n  border: 1px solid #333;\n\n  & a {\n    text-decoration: none;\n  }\n\n  &:hover {\n    background-color: white;\n    border-top: 1px solid #333;\n    border-left: 1px solid #333;\n    border-right: 2px solid #000;\n  }\n`\n\nconst SelectorLabel = styled.span`\n  width: 100%;\n\n  &::after {\n    content: '\\\\25BC';\n    margin-left: 10px;\n    float: right;\n  }\n\n  ${Selector}:hover &::after {\n    content: '\\\\25B2';\n  }\n`\n\nconst Items = styled.div`\n  display: none;\n  position: absolute;\n  margin-top: 30px;\n  background-color: white;\n  width: 150px;\n  margin-left: -11px;\n  z-index: 99999;\n  border-top: 1px solid #EEE;\n  border-left: 1px solid #333;\n  border-right: 2px solid #000;\n  border-bottom: 2px solid #000;\n\n  ${Selector}:hover & {\n    display: block;\n  }\n`\n\nconst Item = styled.div`\n  padding: 10px;\n`\n\nconst LanguageSelector = ({ currentLocale, path }) => {\n  const messages = getMessage(currentLocale);\n  const data = useStaticQuery(graphql`\n    query LanguageQuery {\n      site {\n        siteMetadata {\n          languages {\n            locale\n            label\n          }\n        }\n      }\n    }\n  `) \n\n  return (\n    <Selector>\n      <SelectorLabel>{messages('LANGUAGE')}</SelectorLabel>\n      <Items>\n        {data.site.siteMetadata.languages.map(({label, locale}) =>(\n          <Item key={locale}>\n            <Link to={`/${locale}/${path}`}>{label}</Link>\n          </Item>\n        ))}\n      </Items>\n    </Selector>\n  )\n}\n\nexport default LanguageSelector\n","import React from 'react'\nimport { Link } from 'gatsby'\nimport { css, ThemeProvider } from 'styled-components'\nimport styled from 'styled-components'\n\nimport LanguageSelector from './LanguageSelector'\nimport { getMessage } from '../data/languages'\n\nimport './base.css'\nimport 'normalize.css'\n\n  //max-width: 1180px;\nconst Container = styled.div`\n  display: flex;\n  width: 100%;\n  justify-content: center;\n`\n\nconst Navigation = styled.nav`\n  display: flex;\n  justify-content: space-between;\n  height: 20vh;\n  max-height: 100px;\n  font-size: 1.25rem;\n`\n\nconst NavigationItem = styled.div`\n  display: inline-flex;\n  align-items: center;\n  margin: 0 1em;\n\n  & a {\n    text-decoration: none;\n  }\n`\n\nconst NavigationSpacer = styled.div`\n  display: inline-flex;\n  width: 100%;\n`;\n\nconst theme = {}\n\nconst Layout = ({ location, children }) => {\n  const locationParts = location.pathname.substring(1).split('/');\n  const locale = locationParts.shift();\n  const path = locationParts.join('/')\n\n  const messages = getMessage(locale)\n\n  return (\n    <ThemeProvider theme={theme}>\n      <>\n        <Navigation>\n          <NavigationItem>\n            <Link to={`/${locale}/`}>{messages('HOME')}</Link>\n          </NavigationItem>\n          <NavigationItem>\n            <Link to={`/${locale}/inspiration`}>{messages('INSPIRATION')}</Link>\n          </NavigationItem>\n          <NavigationSpacer />\n          <NavigationItem>\n            <LanguageSelector currentLocale={locale} path={path}/>\n          </NavigationItem>\n        </Navigation>\n        <Container>\n          {children}\n        </Container>\n      </>\n    </ThemeProvider>\n  )\n}\n\nexport default Layout\n"],"sourceRoot":""}