{"version":3,"sources":["webpack:///./src/components/MealInspiration.tsx","webpack:///./src/templates/inspiration.tsx","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./.cache/public-page-renderer.js","webpack:///./src/data/languages.tsx","webpack:///./.cache/public-page-renderer-prod.js","webpack:///./src/components/LanguageSelector.tsx","webpack:///./src/components/Layout.tsx"],"names":["Item","styled","div","withConfig","displayName","componentId","HeroImage","props","react_default","a","createElement","gatsby_image_default","Title","h1","MealInspiration","_ref","meal","locale","gatsby_browser_entry","to","slug","resolutions","heroImage","title","__webpack_require__","d","__webpack_exports__","pageQuery","Wrapper","InspirationPage","pageContext","data","messages","getMessage","meals","shuffle","allContentfulMeal","edges","Layout","Helmet_default","site","siteMetadata","map","_ref2","node","components_MealInspiration","key","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","prop_types__WEBPACK_IMPORTED_MODULE_1__","prop_types__WEBPACK_IMPORTED_MODULE_1___default","gatsby_link__WEBPACK_IMPORTED_MODULE_2__","gatsby_link__WEBPACK_IMPORTED_MODULE_2___default","React","createContext","PropTypes","object","string","isRequired","func","m","module","exports","require","default","formatDateDistanceToNow","date_fns__WEBPACK_IMPORTED_MODULE_0__","_messages_en_NZ_json__WEBPACK_IMPORTED_MODULE_1__","_messages_nl_NL_json__WEBPACK_IMPORTED_MODULE_2__","en-NZ","enNZ","nl-NL","nlNL","formatLocales","message","date","msgs","formatDistanceToNow","ProdPageRenderer","location","pageResources","InternalPageRenderer","Object","assign","json","propTypes","shape","pathname","Selector","SelectorLabel","span","Items","LanguageSelector","currentLocale","currentUrl","_1512068511","languages","label","Container","Navigation","nav","NavigationItem","NavigationSpacer","theme","children","url","styled_components_browser_esm","Fragment","components_LanguageSelector"],"mappings":"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","file":"component---src-templates-inspiration-tsx-5931fc0bc0b8b9ddef1b.js","sourcesContent":["import React from 'react'\n\nimport { Link } from 'gatsby'\nimport Img from 'gatsby-image'\nimport styled from 'styled-components'\n\nconst Item = styled.div`\n  width: 250px;\n  height: 250px;\n  flex: none;\n  display: flex;\n  position: relative;\n`\n\nconst HeroImage = styled(props => <Img {...props} />)`\n  max-width: 100%;\n  max-height: 100%;\n  perspective: 1px;\n`\n\nconst Title = styled.h1`\n  display: none;\n  position: absolute;\n  width: 100%;\n  color: white;\n  bottom: 2rem;\n  margin: 0;\n  padding: 0.25rem;\n  background-color: rgba(0, 0, 0, 0.6);\n\n  ${Item}:hover & {\n    display: block;\n  }\n`\n\ninterface IProps {\n  meal: IMeal\n  locale: string\n}\n\nconst MealInspiration: React.FC<IProps> = ({ meal, locale }) => (\n  <Item>\n    <Link to={`/${locale}/meal/${meal.slug}/`}>\n      <HeroImage resolutions={meal.heroImage.resolutions} />\n      <Title>{meal.title}</Title>\n    </Link>\n  </Item>\n)\n\nexport default MealInspiration\n","import React from 'react'\n\nimport { graphql } from 'gatsby'\nimport { shuffle } from 'lodash'\nimport Helmet from 'react-helmet'\nimport styled from 'styled-components'\n\nimport Layout from '../components/Layout'\nimport MealInspiration from '../components/MealInspiration'\nimport { getMessage } from '../data/languages'\n\nconst Wrapper = styled.div`\n  display: flex;\n  padding: 20px;\n  overflow-x: hidden;\n  flex-wrap: wrap;\n  background-color: #fff;\n  max-width: 1290px;\n\n  @media (max-width: 540px) {\n    max-width: 290px;\n  }\n\n  @media (min-width: 541px) and (max-width: 790px) {\n    max-width: 540px;\n  }\n\n  @media (min-width: 791px) and (max-width: 1040px) {\n    max-width: 790px;\n  }\n\n  @media (min-width: 1041px) and (max-width: 1290px) {\n    max-width: 1040px;\n  }\n`\n\ninterface IProps {\n  pageContext: IPageContext\n  data: ISite & IAllContentfulMeals\n}\n\nconst InspirationPage: React.FC<IProps> = ({ pageContext, data }) => {\n  const messages = getMessage(pageContext.locale)\n  const meals = shuffle(data.allContentfulMeal.edges)\n\n  return (\n    <Layout pageContext={pageContext}>\n      <Helmet\n        title={`${data.site.siteMetadata.title} | ${messages('INSPIRATION')}`}\n      />\n      <Wrapper>\n        {meals.map(({ node }) => (\n          <MealInspiration\n            key={node.slug}\n            meal={node}\n            locale={pageContext.locale}\n          />\n        ))}\n      </Wrapper>\n    </Layout>\n  )\n}\n\nexport default InspirationPage\n\nexport const pageQuery = graphql`\n  query InspirationByLanguage($locale: String!) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allContentfulMeal(\n      filter: { node_locale: { eq: $locale }, title: { ne: null } }\n      sort: { fields: updatedAt, order: DESC }\n    ) {\n      edges {\n        node {\n          title\n          slug\n          heroImage {\n            resolutions(width: 250, height: 250) {\n              ...GatsbyContentfulResolutions\n            }\n          }\n        }\n      }\n    }\n  }\n`\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  withAssetPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n  parsePath,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\n\nconst StaticQueryContext = React.createContext({})\n\nfunction StaticQueryDataRenderer({ staticQueryData, data, query, render }) {\n  const finalData = data\n    ? data.data\n    : staticQueryData[query] && staticQueryData[query].data\n\n  return (\n    <React.Fragment>\n      {finalData && render(finalData)}\n      {!finalData && <div>Loading (StaticQuery)</div>}\n    </React.Fragment>\n  )\n}\n\nconst StaticQuery = props => {\n  const { data, query, render, children } = props\n\n  return (\n    <StaticQueryContext.Consumer>\n      {staticQueryData => (\n        <StaticQueryDataRenderer\n          data={data}\n          query={query}\n          render={render || children}\n          staticQueryData={staticQueryData}\n        />\n      )}\n    </StaticQueryContext.Consumer>\n  )\n}\n\nconst useStaticQuery = query => {\n  if (\n    typeof React.useContext !== `function` &&\n    process.env.NODE_ENV === `development`\n  ) {\n    throw new Error(\n      `You're likely using a version of React that doesn't support Hooks\\n` +\n        `Please update React and ReactDOM to 16.8.0 or later to use the useStaticQuery hook.`\n    )\n  }\n  const context = React.useContext(StaticQueryContext)\n  if (context[query] && context[query].data) {\n    return context[query].data\n  } else {\n    throw new Error(\n      `The result of this StaticQuery could not be fetched.\\n\\n` +\n        `This is likely a bug in Gatsby and if refreshing the page does not fix it, ` +\n        `please open an issue in https://github.com/gatsbyjs/gatsby/issues`\n    )\n  }\n}\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withAssetPrefix,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  useStaticQuery,\n}\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import { formatDistanceToNow } from 'date-fns'\n\nimport enNZ from './messages/en-NZ.json'\nimport nlNL from './messages/nl-NL.json'\n\nconst languages = [\n  {\n    label: '🇳🇿 English',\n    locale: 'en-NZ',\n  },\n  {\n    label: '🇳🇱 Nederlands',\n    locale: 'nl-NL',\n  },\n]\n\nconst defaultLocale = 'en-NZ'\n\nconst messages: Record<string, Record<string, string>> = {\n  'en-NZ': enNZ as Record<string, string>,\n  'nl-NL': nlNL as Record<string, string>,\n}\n\nconst formatLocales: Record<string, any> = {\n  'en-NZ': require('date-fns/locale/en-GB'),\n  'nl-NL': require('date-fns/locale/nl'),\n}\n\nconst getMessage: (locale: string) => (message: string) => string = (\n  locale: string\n) => {\n  return (message: string): string => messages[locale][message]\n}\nconst formatDateDistanceToNow = (locale: string, date: Date) => {\n  const msgs = getMessage(locale)\n  return `${msgs('LAST_UPDATED')} ${formatDistanceToNow(date, {\n    locale: formatLocales[locale],\n  })} ${msgs('AGO')}`\n}\n\nexport { languages, defaultLocale, getMessage, formatDateDistanceToNow }\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\n\nconst ProdPageRenderer = ({ location, pageResources }) => {\n  if (!pageResources) {\n    return null\n  }\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n","import React from 'react'\n\nimport { graphql, Link, useStaticQuery } from 'gatsby'\nimport styled from 'styled-components'\n\nimport { getMessage } from '../data/languages'\n\nconst Selector = styled.div`\n  font-size: 1rem;\n  width: 150px;\n  position: relative;\n  display: flex;\n  padding: 10px;\n  border: 1px solid #333;\n\n  & a {\n    text-decoration: none;\n  }\n\n  &:hover {\n    background-color: white;\n    border-top: 1px solid #333;\n    border-left: 1px solid #333;\n    border-right: 2px solid #000;\n  }\n`\n\nconst SelectorLabel = styled.span`\n  width: 100%;\n\n  &::after {\n    content: '\\\\25BC';\n    margin-left: 10px;\n    float: right;\n  }\n\n  ${Selector}:hover &::after {\n    content: '\\\\25B2';\n  }\n`\n\nconst Items = styled.div`\n  display: none;\n  position: absolute;\n  margin-top: 30px;\n  background-color: white;\n  width: 150px;\n  margin-left: -11px;\n  z-index: 99999;\n  border-top: 1px solid #eee;\n  border-left: 1px solid #333;\n  border-right: 2px solid #000;\n  border-bottom: 2px solid #000;\n\n  ${Selector}:hover & {\n    display: block;\n  }\n`\n\nconst Item = styled.div`\n  padding: 10px;\n`\n\ninterface IProps {\n  currentLocale: string\n  currentUrl: string\n}\n\nconst LanguageSelector: React.FC<IProps> = ({ currentLocale, currentUrl }) => {\n  const data = useStaticQuery(graphql`\n    query LanguageQuery {\n      site {\n        siteMetadata {\n          defaultLocale\n          languages {\n            locale\n            label\n          }\n        }\n      }\n    }\n  `) as ISite\n\n  const messages = getMessage(currentLocale)\n\n  return (\n    <Selector>\n      <SelectorLabel>{messages('LANGUAGE')}</SelectorLabel>\n      <Items>\n        {data.site.siteMetadata.languages.map(({ label, locale }) => (\n          <Item key={locale}>\n            <Link to={`/${locale}/${currentUrl}`}>{label}</Link>\n          </Item>\n        ))}\n      </Items>\n    </Selector>\n  )\n}\n\nexport default LanguageSelector\n","import React, { ReactNode } from 'react'\n\nimport { Link } from 'gatsby'\nimport styled, { ThemeProvider } from 'styled-components'\n\nimport { getMessage } from '../data/languages'\nimport LanguageSelector from './LanguageSelector'\n\nimport 'normalize.css'\nimport './base.css'\n\nconst Container = styled.div`\n  display: flex;\n  width: 100%;\n  justify-content: center;\n`\n\nconst Navigation = styled.nav`\n  display: flex;\n  justify-content: space-between;\n  height: 20vh;\n  max-height: 100px;\n  font-size: 1.25rem;\n`\n\nconst NavigationItem = styled.div`\n  display: inline-flex;\n  align-items: center;\n  margin: 0 1em;\n\n  & a {\n    text-decoration: none;\n  }\n`\n\nconst NavigationSpacer = styled.div`\n  display: inline-flex;\n  width: 100%;\n`\n\nconst theme = {}\n\ninterface IProps {\n  pageContext: IPageContext\n  children: ReactNode\n}\n\nconst Layout: React.FC<IProps> = ({ pageContext, children }) => {\n  const { locale, url } = pageContext\n\n  const messages = getMessage(locale)\n\n  return (\n    <ThemeProvider theme={theme}>\n      <>\n        <Navigation>\n          <NavigationItem>\n            <Link to={`/${locale}/`}>{messages('HOME')}</Link>\n          </NavigationItem>\n          <NavigationItem>\n            <Link to={`/${locale}/inspiration`}>{messages('INSPIRATION')}</Link>\n          </NavigationItem>\n          <NavigationSpacer />\n          <NavigationItem>\n            <LanguageSelector currentLocale={locale} currentUrl={url} />\n          </NavigationItem>\n        </Navigation>\n        <Container>{children}</Container>\n      </>\n    </ThemeProvider>\n  )\n}\n\nexport default Layout\n"],"sourceRoot":""}